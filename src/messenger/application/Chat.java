package messenger.application;import javafx.application.Platform;import javafx.collections.ObservableList;import javafx.fxml.FXML;import javafx.scene.control.*;import javafx.scene.input.KeyCode;import javafx.stage.FileChooser;import javafx.stage.Stage;import messenger.Model;import messenger.application.custom.RoomTab;import messenger.objects.*;import messenger.objects.File;import messenger.objects.types.CommandType;import messenger.objects.types.DataType;import messenger.objects.types.RoomType;import java.io.*;import java.nio.MappedByteBuffer;import java.nio.channels.FileChannel;import java.nio.file.Files;import java.util.ArrayList;import java.util.Arrays;import java.util.LinkedList;import java.util.Optional;public class Chat extends WindowObject {    private Room room;    @FXML    private TabPane tpChat, tpTool;    @FXML    private TextArea taMsg;    @FXML    private ProgressIndicator progInd;    @FXML    private ListView<String> lvUsers;    @FXML    private ListView<Room> lvGroups;    @FXML    private ListView<File> lvFiles;    @FXML    private Button btnAttach, btnSend;    @FXML    private TextField txtFile;    @FXML    private ProgressBar progBar;    private ContextMenu ctxMenu;    private MenuItem makeGroup, chatPersonal, downloadFile;    private Thread sendThread;    private boolean stopSend;    @Override    public void off() {        synchronized (this.getModel().getHolder()) {            this.getRoom().removeUser(this.getModel().getClientUsername());        }        SocketData data = new SocketData(this.getModel().getClientUsername(), this.getModel().getHolder());        this.getModel().getClient().addMessage(data);        this.getStage().close();        this.stopSend = true;    }    @Override    public void init(Stage stage, Model model) {        initObjects(stage, model);    }    public void init(Stage stage, Model model, Room room) {        init(stage, model);        this.setRoom(room);        btnSend.setDisable(true);        ctxMenu = new ContextMenu();        makeGroup = new MenuItem("Make A Group");        chatPersonal = new MenuItem("Chat Personally");        downloadFile = new MenuItem("Download File");        ContextMenu ctxFiles = new ContextMenu();        ctxFiles.getItems().add(downloadFile);        chatPersonal.setOnAction(event -> {            boolean tabExists = false;            for (Tab t : tpChat.getTabs()) {                if (((RoomTab) t).getRoom().containsUser(lvUsers.getSelectionModel().getSelectedItem()) &&                        ((RoomTab) t).getRoom().getType() == RoomType.PERSONAL) {                    tabExists = true;                }            }            if (!tabExists && lvUsers.getSelectionModel().getSelectedItems().size() == 1 &&                    !lvUsers.getSelectionModel().getSelectedItem().equals(this.getModel().getClientUsername())) {                Room r = new Room(this.getRoom(), lvUsers.getSelectionModel().getSelectedItem());                r.setType(RoomType.PERSONAL);                r.getUsers().add(this.getModel().getClientUsername());                r.getUsers().add(lvUsers.getSelectionModel().getSelectedItem());                synchronized (this.getModel().getHolder()) {                    this.getRoom().getGroups().add(r);                    this.getModel().getClient().addMessage(new SocketData(this.getModel()));                    System.out.println("Sent Message");                }            }        });        makeGroup.setOnAction(event -> {            if (lvUsers.getSelectionModel().getSelectedItems().size() > 0 &&                    !lvUsers.getSelectionModel().getSelectedItems().contains(this.getModel().getClientUsername())) {                TextInputDialog dialog = new TextInputDialog();                dialog.setTitle("New Group!");                dialog.setContentText("Group Name: ");                dialog.setHeaderText("What's the group name?");                Optional<String> result = dialog.showAndWait();                Room r = new Room();                r.setParent(this.getRoom());                r.getUsers().addAll(lvUsers.getSelectionModel().getSelectedItems());                r.getUsers().add(this.getModel().getClientUsername());                for (String s : r.getUsers())                    System.out.println(s);                result.ifPresent(data -> {                    r.setName(data);                    r.setType(RoomType.GROUP);                    synchronized (this.getModel().getHolder()) {                        this.getRoom().getGroups().add(r);                        this.getModel().getClient().addMessage(new SocketData(this.getModel()));                    }                });            }        });        ctxMenu.getItems().add(chatPersonal);        ctxMenu.getItems().add(makeGroup);        lvUsers.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);        lvUsers.setContextMenu(ctxMenu);        lvFiles.setContextMenu(ctxFiles);        lvUsers.setOnMousePressed(event -> {            if (event.getClickCount() == 2) {                chatPersonal.fire();            }        });        downloadFile.setOnAction(event -> {            if (lvFiles.getSelectionModel().getSelectedItems().size() == 1 && lvFiles.getSelectionModel().getSelectedItem() != null) {                this.download(lvFiles.getSelectionModel().getSelectedItem());            }        });        lvFiles.setOnMousePressed(event -> {            if (event.getClickCount() == 2)                downloadFile.fire();        });        btnAttach.setOnMouseClicked(event -> {            FileChooser chooser = new FileChooser();            chooser.setTitle("Select a File");            java.io.File f = chooser.showOpenDialog(this.getStage().getScene().getWindow());            if (f != null && f.exists() && f.isFile() && f.length() < 2147483648L) {                txtFile.setText(f.getAbsoluteFile().getAbsolutePath());                btnSend.setDisable(false);            } else if (f != null && f.length() >= 2147483648L) {                this.showAlert("File must be less than 2GB", Alert.AlertType.WARNING);            }        });        btnSend.setOnMouseClicked(event -> {            if (!txtFile.getText().isEmpty()) {                java.io.File f = new java.io.File(txtFile.getText());                if (f.exists() && f.isFile() && f.length() < 2147483648L) {                    stopSend = false;                    sendThread = new Thread(() -> {                        try {                            btnAttach.setDisable(true);                            btnSend.setDisable(true);                            File data = new File();                            data.setFileName(f.getName().substring(0, f.getName().lastIndexOf(".")));                            data.setExtension(f.getName().substring(f.getName().lastIndexOf(".") + 1));                            data.setRoom(this.getRoom());                            FileInputStream fis = new FileInputStream(f);                            byte b;                            int pos = 0;                            data.setBytes(new byte[(int) f.length()]);                            try (BufferedInputStream in = new BufferedInputStream(fis)) {                                byte[] buff = new byte[(f.length() >= 8192) ? 8192 : (int) f.length()];                                int len;                                Platform.runLater(() -> {                                    progBar.setProgress(ProgressIndicator.INDETERMINATE_PROGRESS);                                    progInd.setProgress(ProgressIndicator.INDETERMINATE_PROGRESS);                                });                                while ((len = in.read(buff)) != -1) {                                    for (int i = 0; i < len; i++) {                                        data.getBytes()[i + 8192 * pos] = buff[i];                                    }                                    pos++;                                }                                Platform.runLater(() -> {                                    progBar.setProgress(0);                                    progInd.setProgress(0);                                });                            }                            fis.close();                            SocketData d = new SocketData();                            d.setCommand(CommandType.FILE_SEND);                            d.setData(data);                            d.setSender(this.getModel().getClientUsername());                            this.getModel().getClient().addMessage(d);                            btnAttach.setDisable(false);                            btnSend.setDisable(false);                            txtFile.setText("");                            stopSend = true;                        } catch (IOException e) {                            e.printStackTrace();                        }                    });                    sendThread.start();                } else if (f.length() >= 2147483648L) {                    this.showAlert("File must be less than 2GB", Alert.AlertType.WARNING);                }            }        });        tpChat.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {            lvUsers.getItems().clear();            lvUsers.getItems().addAll(((RoomTab) newValue).getRoom().getUsers());            lvFiles.getItems().clear();            lvFiles.getItems().addAll(((RoomTab) newValue).getRoom().getFiles());        });        taMsg.setOnKeyPressed(event -> {            if (event.getCode() == KeyCode.ENTER) {                Message msg = new Message(((RoomTab) tpChat.getSelectionModel().getSelectedItem()).getRoom());                if (msg.getRoom().getType() == RoomType.PERSONAL)                    msg.getRoom().setParent(this.getRoom());                msg.setSender(this.getModel().getClientUsername());                msg.setReceiver(tpChat.getSelectionModel().getSelectedItem().getText());                msg.setMessage(taMsg.getText());                if (!msg.getMessage().isEmpty()) {                    SocketData socketData = new SocketData(msg, DataType.MESSAGE);                    this.getModel().getClient().addMessage(socketData);                }                taMsg.setText("");            }        });        txtFile.textProperty().addListener((observable, oldValue, newValue) -> {            java.io.File f = new java.io.File(newValue);            if (f.exists() && f.isFile())                btnSend.setDisable(false);            else                btnSend.setDisable(true);        });    }    private void download(File item) {        SocketData download = new SocketData();        download.setCommand(CommandType.DOWNLOAD);        download.setData(item);        download.setSender(this.getModel().getClientUsername());        this.getModel().getClient().addMessage(download);    }    public Room getRoom() {        return room;    }    public void setRoom(Room room) {        this.room = room;        tpChat.getTabs().clear();        if (room.getType() == RoomType.PERSONAL) {            for (int i = 0; i < tpTool.getTabs().size(); i++)                if (tpTool.getTabs().get(i).getText().equals("Groups") ||                        tpTool.getTabs().get(i).getText().equals("Users")) {                    tpTool.getTabs().remove(i);                }        }        tpChat.getTabs().add(new RoomTab(room));    }    public void addMessage(Message msg) {        if (msg != null) {            synchronized (tpChat.getTabs()) {                for (int i = 0; i < tpChat.getTabs().size(); i++)                    if (!msg.getSender().equals("Server") &&                            msg.getRoom().getId().equals(((RoomTab) tpChat.getTabs().get(i)).getRoom().getId())) {                        ((RoomTab) tpChat.getTabs().get(i)).appendMessage(this.getModel().getClientUsername(), msg);                    }            }            if (msg.getSender().equals("Server")) {                if (msg.getMessage().equals("UPDATE_CHAT")) {                    Platform.runLater(() -> {                        lvUsers.getItems().clear();                        lvGroups.getItems().clear();                        lvFiles.getItems().clear();                        for (File f : room.getFiles())                            lvFiles.getItems().add(f);                        for (String user : room.getUsers())                            lvUsers.getItems().add(user);                        boolean tabExists;                        for (Room r : room.getGroups()) {                            tabExists = false;                            if (r.getType() != RoomType.PERSONAL && r.containsUser(this.getModel().getClientUsername()))                                lvGroups.getItems().add(r);                            synchronized (tpChat.getTabs()) {                                for (int i = 0; i < tpChat.getTabs().size(); i++) {                                    if (((RoomTab) tpChat.getTabs().get(i)).getRoom().getId().equals(r.getId())) {                                        tabExists = true;                                    }                                }                                if (!tabExists) {                                    RoomTab tab = new RoomTab(r);                                    tab.setText(r.getName());                                    if (r.getType() == RoomType.PERSONAL)                                        for (int i = 0; i < tab.getRoom().getUsers().size(); i++)                                            if (!tab.getRoom().getUsers().get(i).equals(this.getModel().getClientUsername()))                                                tab.setText(tab.getRoom().getUsers().get(i));                                    if (r.containsUser(this.getModel().getClientUsername())) // for groups                                        tpChat.getTabs().add(tab);                                }                            }                        }                        synchronized (tpChat.getTabs()) {                            for (int i = 1; i < tpChat.getTabs().size(); i++) {                                if (!this.getRoom().hasGroup(((RoomTab) tpChat.getTabs().get(i)).getRoom())) {                                    tpChat.getTabs().remove(i);                                }                            }                        }                    });                }            }        }    }}